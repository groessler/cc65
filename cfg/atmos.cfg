SYMBOLS {
    __TAPEHDR__:   type = import;
    __BASHDR__:    type = import;
    __PROGFLAG__:  type = weak, value = $00; # $00=BASIC, $80=machine code
    __AUTORUN__:   type = weak, value = $00; # $00=only load, $C7=run
    __STACKSIZE__: type = weak, value = $0800; # 2K stack
    __GRAB__:      type = weak, value = 0; # 0=don't grab graphics RAM, 1=grab graphics RAM
    __RAMEND__:    type = weak, value = $9800 + $1C00 * __GRAB__;
}
MEMORY {
    ZP:      file = "", define = yes, start = $00E2, size = $001A;
    TAPEHDR: file = %O, type   = ro,  start = $0000, size = $001F;
    BASHEAD: file = %O, define = yes, start = $0501, size = $000D;
    MAIN:    file = %O, define = yes, start = __BASHEAD_LAST__, size = __RAMEND__ - __RAM_START__ - __STACKSIZE__;
}
SEGMENTS {
    ZEROPAGE: load = ZP,      type = zp;
    TAPEHDR:  load = TAPEHDR, type = ro;
    BASHDR:   load = BASHEAD, type = ro,  define = yes, optional = yes;
    STARTUP:  load = MAIN,    type = ro;
    LOWCODE:  load = MAIN,    type = ro,                optional = yes;
    CODE:     load = MAIN,    type = ro;
    RODATA:   load = MAIN,    type = ro;
    ONCE:     load = MAIN,    type = ro,  define = yes, optional = yes;
    DATA:     load = MAIN,    type = rw;
    ZPSAVE1:  load = MAIN,    type = rw,  define = yes; # ZPSAVE1, ZPSAVE2 must be together
    ZPSAVE2:  load = MAIN,    type = bss;               # see "libsrc/atmos/crt0.s"
    BSS:      load = MAIN,    type = bss, define = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
